name: Timelapse
on:
  schedule:
    - cron: "45 6 * * *"
    - cron: "30 6 * * SUN"
  workflow_dispatch:
    inputs:
      timeframe:
        type: number
        description: |
          Time range (in days) to generate the timelapse video for. Value must
          be between no less than 1.
        required: true
        default: "1"
      start_date:
        type: string
        description: |
          Provide a custom start date for the generated timelapse video. The
          format should be 'YYYY-MM-DD'. The 'end_date' will be calculated
          using the 'timeframe' input value. If no start date is provided, the
          latest date will be used..
        required: false
      video_title:
        type: string
        description: |
          Provide a custom title for the generated video. Supports several
          different placeholders for dynamic values:
            '{date_start}', '{date_end}', '{days_total}', '{date_range}'
          > **Note**: date_range is equivalent to '{date_start} - {date_end}',
          unless the start and end dates are the same, in which case it just
          evaluates to '{date_start}'.
        default: "Timelapse for {date_range}"
        required: false
      video_description:
        type: string
        description: |
          Provide a custom description for the generated video. The same
          placeholder rules apply as with titles.
        default: "Timelapse video for {date_range}"
        required: false
      video_filename:
        type: string
        description: |
          Provide a custom filename for the generated video. The extension
          should be '.mp4'. The same placeholder rules apply here as they do in
          the title and description inputs.
        default: "timelapse_{date_range}.mp4"
        required: false
      video_width:
        type: number
        description: |
          Provide a custom width for the generated video. The height will be
          calculated automatically based on the aspect ratio of the images.
          The default value is 1920.
        default: "1920"
        required: false
      video_fps:
        type: number
        description: "Provide a custom framerate for the generated video."
        default: "15"
        required: false
      video_crf:
        type: number
        description: |
          Provide a custom CRF value for the generated video. The default value
          is 17.
        default: "17"
        required: false
      video_preset:
        type: string
        description: |
          Provide a custom preset for the generated video. The default value is
          'slow'.
        default: "slow"
        required: false
      video_movflags:
        type: string
        description: |
          Provide custom movflags for the generated video. The default value is
          '+faststart'.
        default: "+faststart"
        required: false
jobs:
  cache:
    runs-on: ubuntu-latest
    steps:
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global fetch.parallel 32

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Assets Directory
        id: cache-hit
        uses: actions/cache@v3
        with:
          path: assets
          key: ${{ runner.os }}-assets-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-assets-${{ github.sha }}
            ${{ runner.os }}-assets-

  metadata:
    needs: cache
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.collect.outputs.files }}
      dates: ${{ steps.collect.outputs.dates }}
      all_dates: ${{ steps.collect.outputs.all_dates }}

    steps:
      - name: Restore Cache
        uses: actions/cache@v3
        with:
          path: assets
          key: ${{ runner.os }}-assets-${{ github.sha }}

      - id: collect
        name: "(setup) collect items"
        env:
          VIDEO_TIMEFRAME: ${{ fromJson(inputs.timeframe) }}
          VIDEO_START_DATE: ${{ inputs.start_date }}
        run: |
          #!/bin/bash

          if [ -z "$VIDEO_START_DATE" ]; then
            # If a start date is not provided, take the latest date
            start_date="${all_dates[0]}"
          else
            start_date="$VIDEO_START_DATE"
          fi

          end_date=$(date -d "$start_date + $VIDEO_TIMEFRAME days" +"%Y-%m-%d")
          all_dates=($(cd assets && env ls -t1 --time=ctime -I "*.jpg"))

          dates=()
          files=()

          for date in "${all_dates[@]}"; do
            # if [[ "$date" > "$start_date" && "$date" < "$end_date" ]]; then
            # we cannot compare dates with the > and < operators (like above), so we
            # need to convert them to seconds since epoch first
            date_sec=$(date -d "$date" +%s)
            start_date_sec=$(date -d "$start_date" +%s)
            end_date_sec=$(date -d "$end_date" +%s)
            if (( date_sec >= start_date_sec && date_sec <= end_date_sec )); then
              dates+=("$date")
              files_in_date=($(ls assets/$date/*.jpg))
              files=("${files[@]}" "${files_in_date[@]}")
            fi
          done

          all_dates_str="$(printf '%s\n' "${all_dates[@]}" | jq -R . | jq -s .)"
          echo "all_dates=$all_dates_str" >> $GITHUB_OUTPUT

          dates_str="$(printf '%s\n' "${dates[@]}" | jq -R . | jq -s .)"
          echo "dates=$dates_str" >> $GITHUB_OUTPUT

          files_str="$(printf '%s\n' "${files[@]}" | jq -R . | jq -s .)"
          echo "files=$files_str" >> $GITHUB_OUTPUT

  generate_video:
    needs: metadata
    runs-on: ubuntu-latest
    steps:
      - name: install ffmpeg
        run: brew install ffmpeg

      - name: Generate Timelapse
        env:
          VIDEO_FILES: ${{ needs.metadata.outputs.files }}
          VIDEO_TITLE: ${{ inputs.video_title }}
          VIDEO_DESCRIPTION: ${{ inputs.video_description }}
          VIDEO_FILENAME: ${{ inputs.video_filename }}
          VIDEO_WIDTH: ${{ inputs.video_width }}
          VIDEO_FPS: ${{ inputs.video_fps }}
          VIDEO_CRF: ${{ inputs.video_crf }}
          VIDEO_PRESET: ${{ inputs.video_preset }}
          VIDEO_MOVFLAGS: ${{ inputs.video_movflags }}
        run: |
          #!/bin/bash

          ALL_DATES=(${{ fromJson(needs.metadata.outputs.all_dates) }})
          VIDEO_DATES=( ${{ fromJson(needs.metadata.outputs.dates) }})
          VIDEO_FILES=(${{ fromJson(needs.metadata.outputs.files) }})

          # Create a temp directory for the input files
          TIMELAPSE_DIR="$(mktemp -d -t timelapse-XXXXXXXXXX)"
          for date in "${VIDEO_DATES[@]}"; do
            mkdir -p "$TIMELAPSE_DIR/$date"
            cp -r "assets/$date" "$TIMELAPSE_DIR"
          done

          # Resolve placeholders for title, description, and filename
          dates=($VIDEO_FILES)
          start_date="${dates[0]}"
          end_date="${dates[-1]}"
          date_range=$start_date

          if [ "$start_date" != "$end_date" ]; then
            date_range="$start_date - $end_date"
          fi

          declare -A placeholders
          placeholders=(
            ["{date_start}"]=$start_date
            ["{date_end}"]=$end_date
            ["{date_range}"]=$date_range
          )

          for key in "${!placeholders[@]}"; do
            VIDEO_TITLE=${VIDEO_TITLE//$key/${placeholders[$key]}}
            VIDEO_DESCRIPTION=${VIDEO_DESCRIPTION//$key/${placeholders[$key]}}
            VIDEO_FILENAME=${VIDEO_FILENAME//$key/${placeholders[$key]}}
          done

          OUTPUT_PATH="assets/timelapse/$VIDEO_FILENAME"
          mkdir -p "assets/timelapse"
          if [ -f "$OUTPUT_PATH" ]; then
            # If the file already exists, append a timestamp to the filename
            OUTPUT_PATH="assets/timelapse/$(date +%s)_$VIDEO_FILENAME"
          fi

          echo "path=$OUTPUT_PATH" >> $GITHUB_OUTPUT
          echo "VIDEO_TITLE=$VIDEO_TITLE" >> $GITHUB_ENV
          echo "VIDEO_DESCRIPTION=$VIDEO_DESCRIPTION" >> $GITHUB_ENV
          echo "VIDEO_FILENAME=$VIDEO_FILENAME" >> $GITHUB_ENV
          echo "OUTPUT_PATH=$OUTPUT_PATH" >> $GITHUB_ENV

          # Generate the timelapse
          ffmpeg \
            -framerate $VIDEO_FPS \
            -pattern_type glob \
            -i "$TIMELAPSE_DIR/*/*.jpg" \
            -s:v $VIDEO_WIDTH \
            -c:v libx264 \
            -crf $VIDEO_CRF \
            -preset $VIDEO_PRESET \
            -tune film \
            -movflags $VIDEO_MOVFLAGS \
            -metadata title="$VIDEO_TITLE" \
            -metadata description="$VIDEO_DESCRIPTION" \
            -metadata year="$(date +%Y)" \
            -metadata date="$(date +%Y-%m-%d)" \
            -metadata comment="Generated by github.com/nberlette/f1" \
            -y "$OUTPUT_PATH"

          # Cleanup
          rm -rf "$TIMELAPSE_DIR"

      - name: Commit and Push
        env:
          OUTPUT_PATH: ${{ env.OUTPUT_PATH }}
          VIDEO_TITLE: ${{ env.VIDEO_TITLE }}
        run: |
          # Upload the timelapse to the repository
          git add "$OUTPUT_PATH"
          git commit -m "ðŸŽ¬ new timelapse: '$VIDEO_TITLE'"
          git push

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        env:
          OUTPUT_PATH: ${{ env.OUTPUT_PATH }}
          VIDEO_FILENAME: ${{ env.VIDEO_FILENAME }}
        with:
          path: ${{ env.OUTPUT_PATH }}
          name: ${{ env.VIDEO_FILENAME }}
